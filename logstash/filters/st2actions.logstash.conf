input { 
  file { 
      path => "/var/log/st2/st2actions.audit.log"
      sincedb_path => "/tmp/sincedb-st2actions_audit"
      start_position => beginning
  }
}

filter {
 if [message] =~ /Launching/ {
  grok {
    match => ["message", "%{SYSLOGTIMESTAMP} %{HOSTNAME:st2_host} %{SYSLOGPROG}: %{WORD:level} %{NUMBER:thread} %{WORD:module} \[-\] Launching Action command with actionexec_db=\"ActionExecutionDB\(action=\"(?<action>\w+\.\w+)\", callback=(?<callback>(\{.*\})), context=(?<context>(\{.*\})), id=%{WORD:action_id}, parameters=(?<parameters>(\{.*\})), result=(?<result>(\{.*\})), start_timestamp=\"%{TIMESTAMP_ISO8601:start_timestamp}\", status=\"%{WORD:execution_status}\"\)\""]
  break_on_match => false
  remove_field => [ "message", "host", "module" ]
  }
  mutate {
    gsub => [
      "result","\[\]",'None',
      "result",'\[','',
      "result",'\]','',
      "result","'",'"',
      "result","None",'"None"',
      "result","False","false",
      "result","True","true"
    ]
    gsub => [
      "parameters","\[\]",'None',
      "parameters",'\[','',
      "parameters",'\]','',
      "parameters","'",'"',
      "parameters","None",'"None"',
      "parameters","False","false",
      "parameters","True","true"
    ]
    gsub => [
      "context","\[\]",'None',
      "context",'\[','',
      "context",'\]','',
      "context","'",'"',
      "context","None",'"None"',
      "context","False","false",
      "context","True","true"
    ]
  }
  json {
    source => "result"
  }
 }
}

filter {
 if [message] =~ /complete/ {
  grok {
    match => ["message", "%{SYSLOGTIMESTAMP} %{HOSTNAME} %{SYSLOGPROG}: %{WORD:level} %{NUMBER:thread} %{WORD:module} \[-\] ActionExecution complete\. actionexec_id=\"%{WORD:execution_id}\" resulted in actionexecution_db=\"ActionExecutionDB\(action=\"(?<action>\w+\.\w+)\", callback=(?<callback>(\{.*\})), context=(?<context>(\{.*\})), id=%{WORD:action_id}, parameters=(?<parameters>(\{.*\})), result=(?<result>(\{.*\})), start_timestamp=\"%{TIMESTAMP_ISO8601:start_timestamp}\", status=\"%{WORD:execution_status}\"\)\""]
  break_on_match => false
  remove_field => [ "message", "host", "module" ]
  }
  mutate {
    gsub => [
      "result","\[\]",'None',
      "result",'\[','',
      "result",'\]','',
      "result","'",'"',
      "result","None",'"None"',
      "result","False","false",
      "result","True","true"
    ]
    gsub => [
      "parameters","\[\]",'None',
      "parameters",'\[','',
      "parameters",'\]','',
      "parameters","'",'"',
      "parameters","None",'"None"',
      "parameters","False","false",
      "parameters","True","true"
    ] 
    gsub => [
      "context","\[\]",'None',
      "context",'\[','',
      "context",'\]','',
      "context","'",'"',
      "context","None",'"None"',
      "context","False","false",
      "context","True","true"
    ] 
  }
  json {
    source => "result"
  } 
 }
}

output {
  elasticsearch { host => localhost }
  # stdout { codec => rubydebug }
}
